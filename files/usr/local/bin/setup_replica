#!/usr/bin/env bash

function wait_for_mongod_logline {
    # Make sure log file exists first
    MAXLOOPS=50
    while [ ! -f /var/log/mongodb/mongod.log ] && [ $MAXLOOPS -gt 0 ]; do
        sleep 0.1
        MAXLOOPS=$(expr $MAXLOOPS - 1)
        echo -n "!"
    done

    # Wait for log line
    LOGLINE=$1
    MAXLOOPS=50
    while [ $(tail -5 /var/log/mongodb/mongod.log | grep -q "$LOGLINE" && echo "Y" || echo "N") == "N" ] && [ $MAXLOOPS -gt 0 ]; do
        sleep 0.1
        MAXLOOPS=$(expr $MAXLOOPS - 1)
        echo -n "."
    done
    echo
}

function wait_for_mongod_to_start {
    wait_for_mongod_logline "waiting for connections on port"
}

function lock {
    exec 200> ${LOCKFILE}
    flock -n 200 && return 0 || return 1
}

function unlock {
    rm -f $LOCKFILE
    echo "Released lock"
}

function setup_mongo_js_scripts {
    sed -i -e "s|<ADMINUSER>|$ADMINUSER|" \
           -e "s|<ADMINPASS>|$ADMINPASS|" $MONGO_SCRIPTS/*.js
}

function purge_dead_hosts {
    FOUND=0
    for OLD_HOSTPATH in $(find ${REPLICA_SET_HOME} -type f -mmin +1)
    do
        echo "Removing old heartbeat file for dead host "$(basename $OLD_HOSTPATH)
        rm -f $OLD_HOSTPATH
        OLD_HOST=$(basename ${OLD_HOSTPATH})
        FOUND=1
    done
    [ $FOUND -eq 1 ] && mongo ${MONGO_SCRIPTS}/purge_old_hosts.js
}

function maybe_become_primary {
    PRIMARY_COUNTER=$1
    lock
    if [ $? -eq 0 ] ; then
        echo "Got lock"
        purge_dead_hosts

        HOST_COUNT=$(find ${REPLICA_SET_HOME} -type f -mmin -1 | grep -v $HOSTNAME | wc -l)
        if [ $HOST_COUNT -eq 0 ]; then
            echo "No other hosts appear to be alive, so setting myself as primary"
            mongo ${MONGO_SCRIPTS}/set_as_primary.js
        elif [ $PRIMARY_COUNTER -gt 3 ]; then
            echo "No other hosts appear to be primary, so setting myself as primary and restarting other hosts"
            for SECONDARY_HOSTPATH in $(find ${REPLICA_SET_HOME} -type f -mmin -1 | grep -v $SHORT_HOSTNAME)
            do
                SECONDARY_HOST=$(cat ${SECONDARY_HOSTPATH})
                echo "Asking host $SECONDARY_HOST to restart"
                touch ${MONGO_SHARE}/force_restart_${SECONDARY_HOST}
            done
            mongo ${MONGO_SCRIPTS}/set_as_primary.js
        fi

    fi
    unlock
}

function get_replica_status {
    export STATUS=$(mongo ${MONGO_SCRIPTS}/get_replica_status.js | egrep "PRIMARY|SECONDARY|UNKNOWN" | sed 's/"//g')
    echo "STATUS is $STATUS"
}

function add_secondaries {
    mongo ${MONGO_SCRIPTS}/get_members.js > /tmp/current_members.txt

    for CURRENT_HOSTPATH in $(find ${REPLICA_SET_HOME} -type f -mmin -1 | grep -v $HOSTNAME)
    do
        CURRENT_HOST=$(cat ${CURRENT_HOSTPATH})
        echo "Found heartbeat file for host $CURRENT_HOST"
        grep -q $CURRENT_HOST /tmp/current_members.txt
        if [ $? -eq 1 ]; then
            echo "Host '$CURRENT_HOST' is not a member - adding it"
            sed "s/<HOSTNAME>/$CURRENT_HOST/" ${MONGO_SCRIPTS}/add_host.js > /tmp/add_host.js
            mongo /tmp/add_host.js
        fi
    done
}

function do_primary_stuff {
    lock
    if [ $? -eq 0 ] ; then
        echo "Got lock"
        purge_dead_hosts
        add_secondaries
    fi
    unlock
}

function hearbeat {
    if [ -f /tmp/.usercreated ]; then
        rm /tmp/.usercreated
        maybe_become_primary 99
    fi

    PRIMARY_COUNTER=0
    while [ 1 ]; do
        # Tell all hosts we are alive, and where to find us...
        echo $SHORT_HOSTNAME > $HOSTPATH
        # Work out what our responsibilities are
        get_replica_status
        if [ $STATUS == "PRIMARY" ]; then
            do_primary_stuff
            PRIMARY_COUNTER=0
        elif [ $STATUS == "UNKNOWN" ]; then
            echo "Not PRIMARY or SECONDARY yet"
            echo "PRIMARY_COUNTER: $PRIMARY_COUNTER"

            # No need to restart if we haven't joined a previous rs
            # Just restart the counter
            if [ -f ${MONGO_SHARE}/force_restart_${SHORT_HOSTNAME} ]; then
                rm -f ${MONGO_SHARE}/force_restart_${SHORT_HOSTNAME}
                PRIMARY_COUNTER=0
            fi

            maybe_become_primary $PRIMARY_COUNTER
            PRIMARY_COUNTER=$(expr $PRIMARY_COUNTER + 1)
        else
            # SECONDARY
            if [ -f ${MONGO_SHARE}/force_restart_${SHORT_HOSTNAME} ]; then
                rm -f ${MONGO_SHARE}/force_restart_${SHORT_HOSTNAME}
                kill 1
            fi
            PRIMARY_COUNTER=0
        fi
        sleep 30
    done
}

REPLICA_SET_HOME=${MONGO_SHARE}/${REPLICA_SET}
mkdir -p ${REPLICA_SET_HOME}
HOSTNAME=$(hostname)
SHORT_HOSTNAME=$(hostname | cut -d \- -f 1) # mongo1-1-1234 becomes mongo1
#SERVICE_IP=$(set | grep -i ${SHORT_HOSTNAME}_SERVICE_HOST | cut -d = -f2)
#[ -z $SERVICE_IP ] && SERVICE_IP=$HOSTNAME # Fallback for local testing
HOSTPATH=${REPLICA_SET_HOME}/${HOSTNAME}
LOCKFILE=${MONGO_SHARE}/alockfile

setup_mongo_js_scripts
wait_for_mongod_to_start
hearbeat
